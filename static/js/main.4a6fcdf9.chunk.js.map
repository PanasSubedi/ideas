{"version":3,"sources":["helpers/storage.js","helpers/helpers.js","components/menu.js","ideas.js","App.js","reportWebVitals.js","index.js"],"names":["getNewID","element","meta","localStorage","getItem","lastInsertTagID","lastInsertIdeaID","setItem","JSON","stringify","parse","idToReturn","charAt","toUpperCase","slice","parseInt","toString","updateIdea","dateData","ideas","getAllIdeas","currentDate","filter","idea","date","length","forEach","title","tags","push","exportAsJSON","exportName","allIdeas","map","tag","ideaObj","filename","data","dataStr","encodeURIComponent","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","downloadFile","getDateData","dateString","dataToReturn","Date","toDateString","Menu","props","onClose","open","Dialog","aria-labelledby","List","ListItem","button","onClick","ListItemText","primary","alert","inputNode","addEventListener","event","uploadedFile","target","files","fileReader","FileReader","readAsText","onload","e","result","id","tagEdit","ideaEdit","window","location","reload","importJSON","monthNames","initialData","useStyles","makeStyles","theme","root","marginTop","page","padding","backgroundColor","minHeight","borderTop","pageContent","lines","borderBottom","display","fontSize","margin","source","textAlign","fontStyle","ideaTextField","width","actionItems","cursor","actionButtons","menuIcon","marginBottom","Ideas","useState","setDate","setTitle","setTags","setIdeas","tagSearchResults","setTagSearchResults","displayTagSearchResults","setDisplayTagSearchResults","editingTag","setEditingTag","editingIdea","setEditingIdea","editingTitle","setEditingTitle","editTitleIconDisplay","setEditTitleIconDisplay","displayCalendar","setDisplayCalendar","needsDataUpdate","setNeedsDataUpdate","menuOpen","setMenuOpen","classes","useEffect","handleCalendarSelection","value","newDateData","handleTagClick","reqTag","flag","handleTagValueKeyDown","key","keyCode","prevTags","newTags","preventDefault","handleTagValueChange","newValue","handleTitleKeyDown","handleTitleValueChange","handleIdeaValueKeyDown","prevIdeas","newIdeas","handleIdeaValueChange","getIdeaContent","index","TextField","className","label","variant","autoFocus","onChange","onKeyDown","Typography","IconButton","size","ideaID","aria-label","style","getTagChip","Chip","onDelete","tagID","Container","maxWidth","Link","href","rel","color","Paper","square","light","selection","elevation","Grid","container","justify","alignItems","item","getDate","getMonth","getFullYear","marginLeft","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4a6fcdf9.chunk.js","sourcesContent":["function getNewID(element){\r\n  /***\r\n    Retrieves new ID for tag and idea based on input\r\n  */\r\n  if (element !== 'tag' && element !== 'idea'){\r\n    return null;\r\n  }\r\n\r\n  let meta = localStorage.getItem('meta')\r\n  if (meta === null){\r\n    meta = {\r\n      lastInsertTagID: 0,\r\n      lastInsertIdeaID: 0,\r\n    }\r\n    localStorage.setItem('meta', JSON.stringify(meta))\r\n  }\r\n\r\n  else {\r\n    meta = JSON.parse(meta)\r\n  }\r\n\r\n  const idToReturn = meta['lastInsert' + element.charAt(0).toUpperCase() + element.slice(1) + 'ID']\r\n\r\n  meta['lastInsert' + element.charAt(0).toUpperCase() + element.slice(1) + 'ID'] = parseInt(idToReturn) + 1;\r\n  localStorage.setItem('meta', JSON.stringify(meta));\r\n\r\n  return idToReturn.toString();\r\n\r\n}\r\n\r\nfunction updateIdea(dateData){\r\n  /******\r\n    Takes an idea object and adds it to the storage.\r\n\r\n    Param: dateData - object\r\n\r\n    Param example: {\r\n      date: dateString,\r\n      title: title,\r\n      tags: [//array of tags],\r\n      ideas: [//array of ideas]\r\n    }\r\n  */\r\n\r\n  const ideas = getAllIdeas();\r\n\r\n  const currentDate = ideas.filter(idea => idea.date === dateData.date)\r\n  if (currentDate.length === 1){\r\n    ideas.forEach(idea => {\r\n      if (idea.date === dateData.date){\r\n        idea.title = dateData.title;\r\n        idea.tags = dateData.tags;\r\n        idea.ideas = dateData.ideas;\r\n      }\r\n    })\r\n    localStorage.setItem('ideas', JSON.stringify(ideas))\r\n  }\r\n\r\n  else if (currentDate.length === 0){\r\n    ideas.push(dateData);\r\n    localStorage.setItem('ideas', JSON.stringify(ideas))\r\n  }\r\n\r\n}\r\n\r\nfunction getAllIdeas(){\r\n  /**\r\n  * Returns an array of all the idea objects in storage\r\n  */\r\n  const ideas = localStorage.getItem('ideas')\r\n  if (ideas == null){\r\n    return [];\r\n  }\r\n\r\n  else {\r\n    return JSON.parse(ideas);\r\n  }\r\n}\r\n\r\nexport { getAllIdeas, updateIdea, getNewID }\r\n","import { getAllIdeas, updateIdea, getNewID } from './storage';\r\n\r\nfunction getTitlesByTag(reqTag) {\r\n  /**\r\n  * Returns a list of all the Idea Objects (with date, title, tags, and ideas)\r\n  * containing a specific tag.\r\n  *\r\n  * params - reqTag:string\r\n  *\r\n  * Output format: array(\r\n  *   {\r\n  *     date:string,\r\n  *     title:string,\r\n  *     tags:array({id:string, tag:string, tagEdit:boolean}),\r\n  *     ideas: arrat(id:string, idea:string, ideaEdit:boolean)\r\n  *   }\r\n  * )\r\n  */\r\n  const ideas = getAllIdeas();\r\n\r\n  return ideas.filter(idea => {\r\n    let flag = false;\r\n    idea.tags.forEach(tag => {\r\n      if(tag.tag === reqTag){\r\n        flag = true;\r\n      }\r\n    })\r\n\r\n    return flag;\r\n  })\r\n}\r\n\r\nfunction importJSON(){\r\n  /**\r\n  * Creates an input file element, triggers it, and stores all the data\r\n  * in the input file in the application\r\n  *\r\n  * params - None\r\n  *\r\n  * Output format - None\r\n  */\r\n\r\n  alert('Importing will wipe your current data. Click Cancel on the Upload window to stop the process.')\r\n\r\n  const handleFileUpload = event => {\r\n    const uploadedFile = event.target.files[0];\r\n\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsText(uploadedFile, 'UTF-8');\r\n    fileReader.onload = e => {\r\n      const ideas = JSON.parse(e.target.result);\r\n\r\n      ideas.forEach(idea => {\r\n\r\n        // for each idea, create the idea object and add to the storage\r\n        updateIdea({\r\n          date: idea.date,\r\n          title: idea.title,\r\n          tags: idea.tags.map(tag => {\r\n            return {\r\n              id: getNewID('tag'),\r\n              tag: tag,\r\n              tagEdit: false\r\n            }\r\n          }),\r\n          ideas: idea.ideas.map(idea => {\r\n            return {\r\n              id: getNewID('idea'),\r\n              idea: idea,\r\n              ideaEdit: false\r\n            }\r\n          })\r\n        })\r\n      })\r\n    }\r\n    window.location.reload();\r\n  }\r\n\r\n  const inputNode = document.createElement('input')\r\n  inputNode.setAttribute('type', 'file')\r\n  inputNode.addEventListener('change', handleFileUpload)\r\n\r\n  document.body.appendChild(inputNode);\r\n  inputNode.click();\r\n  inputNode.remove();\r\n\r\n}\r\n\r\nfunction downloadFile(filename, data){\r\n  /**\r\n  * Download given data\r\n  *\r\n  * params:\r\n  *   filename - output file name\r\n  *   data - data to add to the file\r\n  */\r\n  const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data))\r\n  const downloadAnchorNode = document.createElement('a');\r\n\r\n  downloadAnchorNode.setAttribute('href', dataStr);\r\n  downloadAnchorNode.setAttribute('download', filename + '.json');\r\n  document.body.appendChild(downloadAnchorNode);\r\n  downloadAnchorNode.click();\r\n  downloadAnchorNode.remove();\r\n}\r\n\r\nfunction exportAsJSON(exportName){\r\n  /**\r\n  * export all the ideas in the storage\r\n  */\r\n  const allIdeas = getAllIdeas();\r\n  allIdeas.forEach(idea => {\r\n\r\n    idea.tags = idea.tags.map(tag => tag.tag);\r\n    idea.ideas = idea.ideas.map(ideaObj => ideaObj.idea);\r\n\r\n  });\r\n\r\n  downloadFile('export', allIdeas);\r\n}\r\n\r\nfunction getDateData(dateString){\r\n  /**\r\n  * return idea object for the provided date\r\n  *\r\n  * params:\r\n  *   dateString - JS Date object converted to string using toDateString()\r\n  */\r\n\r\n  const dataToReturn = getAllIdeas().filter(idea => idea.date === dateString)\r\n  if (dataToReturn.length === 0){\r\n    return {\r\n      date: new Date().toDateString(),\r\n      title: '',\r\n      tags: [],\r\n      ideas: []\r\n    }\r\n  }\r\n  else {\r\n    return dataToReturn[0]\r\n  }\r\n}\r\n\r\nexport { getDateData, exportAsJSON, importJSON, getTitlesByTag }\r\n","import React from 'react';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { exportAsJSON, importJSON } from '../helpers/helpers';\r\n\r\nfunction Menu(props) {\r\n  const { onClose, open } = props;\r\n\r\n  const handleClose = () => {\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n      <List>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            exportAsJSON('download')\r\n            onClose()\r\n          }}\r\n        >\r\n          <ListItemText primary='Export ideas as JSON' />\r\n        </ListItem>\r\n\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            importJSON()\r\n            onClose()\r\n          }}\r\n        >\r\n          <ListItemText primary='Import ideas from JSON' />\r\n        </ListItem>\r\n\r\n      </List>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport Calendar from \"react-material-ui-calendar\";\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { updateIdea, getNewID } from './helpers/storage';\r\nimport { getDateData, getTitlesByTag } from './helpers/helpers';\r\nimport Menu from './components/menu';\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\nconst initialData = getDateData(new Date().toDateString());\r\n\r\nconst tagLimit = 15\r\nconst ideaLimit = 150\r\nconst titleLimit = 75\r\n\r\nfunction Ideas() {\r\n\r\n  // primary variables\r\n  const [date, setDate] = useState(new Date(initialData.date));\r\n  const [title, setTitle] = useState(initialData.title);\r\n  const [tags, setTags] = useState(initialData.tags);\r\n  const [ideas, setIdeas] = useState(initialData.ideas);\r\n\r\n  // to store and display the search results after user clicks a tag\r\n  const [tagSearchResults, setTagSearchResults] = useState([]);\r\n  const [displayTagSearchResults, setDisplayTagSearchResults] = useState(false);\r\n\r\n  // display corresponding textbox if these variables are set to true\r\n  const [editingTag, setEditingTag] = useState(false);\r\n  const [editingIdea, setEditingIdea] = useState(false);\r\n  const [editingTitle, setEditingTitle] = useState(false);\r\n\r\n  // display icon only if user isn't editing title\r\n  const [editTitleIconDisplay, setEditTitleIconDisplay] = useState(true);\r\n\r\n  // to display calendar\r\n  const [displayCalendar, setDisplayCalendar] = useState(false);\r\n\r\n  // required while switching views from Calendar to a single title (date)\r\n  const [needsDataUpdate, setNeedsDataUpdate] = useState(true);\r\n\r\n  // for import export menu\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    document.title = 'My Ideas';\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const dateData = {\r\n      date: date.toDateString(),\r\n      title,\r\n      tags,\r\n      ideas\r\n    }\r\n\r\n    if(needsDataUpdate) {\r\n      // required while switching views from Calendar to a single title (date)\r\n      updateIdea(dateData);\r\n    }\r\n\r\n  }, [ideas, tags, title, date, needsDataUpdate])\r\n\r\n  const handleDateEdit = () => {\r\n    setDisplayTagSearchResults(false);\r\n    setDisplayCalendar(true);\r\n  }\r\n\r\n  const handleCalendarSelection = value => {\r\n    const newDateData = getDateData(value.toDateString());\r\n\r\n\r\n    setNeedsDataUpdate(false);\r\n    // to stop useEffect from changing values mid process\r\n\r\n    setDate(value);\r\n    setTitle(newDateData.title);\r\n    setTags(newDateData.tags);\r\n    setIdeas(newDateData.ideas);\r\n\r\n    setNeedsDataUpdate(true);\r\n\r\n    setDisplayTagSearchResults(false);\r\n    setDisplayCalendar(false);\r\n  }\r\n\r\n  const handleTagClick = tag => {\r\n    setDisplayCalendar(false);\r\n    setDisplayTagSearchResults(true);\r\n\r\n    setTagSearchResults(getTitlesByTag(tag));\r\n  }\r\n\r\n  const handleTagDelete = tagID => {\r\n    setTags(prevTags => {\r\n      return prevTags.filter(tag => tag.id !== tagID)\r\n    })\r\n  }\r\n\r\n  const handleTagValueKeyDown = event => {\r\n    if (event.key === 'Enter' || event.keyCode === 13){\r\n      setTags(prevTags => {\r\n        let newTags = [];\r\n        prevTags.forEach(tag => {\r\n\r\n          // set tagEdit to false to stop displaying the textfield\r\n          if (tag.tagEdit){\r\n            tag.tagEdit = false\r\n          }\r\n          newTags.push(tag)\r\n        })\r\n        return newTags;\r\n      })\r\n\r\n      setEditingTag(false)\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  const handleTagValueChange = event => {\r\n\r\n    const newValue = event.target.value;\r\n    if (newValue.length > tagLimit){\r\n      alert('Maximum tag length reached. Please try a shorter tag.');\r\n    }\r\n    else {\r\n      setTags(prevTags => {\r\n        let newTags = []\r\n        prevTags.forEach(tag => {\r\n          if (tag.tagEdit) {\r\n            tag.tag = newValue;\r\n          }\r\n          newTags.push(tag)\r\n        })\r\n        return newTags;\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleTitleKeyDown = event => {\r\n    if (event.key === 'Enter' || event.keyCode === 13){\r\n      setEditingTitle(false);\r\n      setEditTitleIconDisplay(true);\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  const handleTitleValueChange = event => {\r\n    const newValue = event.target.value;\r\n    if (newValue.length > titleLimit){\r\n      alert('Maximum title length reached. Please try a shorter title.');\r\n    }\r\n    else {\r\n      setTitle(newValue);\r\n    }\r\n  }\r\n\r\n  const handleTitleEditKey = () => {\r\n    setEditingTitle(true);\r\n    setEditTitleIconDisplay(false);\r\n  }\r\n\r\n  const handleIdeaValueKeyDown = event => {\r\n    if (event.key === 'Enter' || event.keyCode === 13){\r\n\r\n      setIdeas(prevIdeas => {\r\n        let newIdeas = [];\r\n        prevIdeas.forEach(idea => {\r\n\r\n          // set ideaEdit to false to stop displaying the textfield\r\n          if (idea.ideaEdit){\r\n            idea.ideaEdit = false;\r\n          }\r\n          newIdeas.push(idea)\r\n        })\r\n        return newIdeas;\r\n      })\r\n\r\n      setEditingIdea(false);\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  const handleIdeaValueChange = event => {\r\n\r\n    const newValue = event.target.value;\r\n    if (newValue.length > ideaLimit){\r\n      alert('Maximum idea length reached. Please try a shorter idea or continue on the next line.');\r\n    }\r\n    else {\r\n      setIdeas(prevIdeas => {\r\n        let newIdeas = []\r\n        prevIdeas.forEach(idea => {\r\n          if (idea.ideaEdit) {\r\n            idea.idea = newValue\r\n          }\r\n          newIdeas.push(idea)\r\n        })\r\n        return newIdeas;\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleIdeaDelete = ideaID => {\r\n    setIdeas(prevIdeas => {\r\n      return prevIdeas.filter(idea => idea.id !== ideaID)\r\n    })\r\n  }\r\n\r\n  const handleIdeaEditKey = ideaID => {\r\n\r\n    setEditingIdea(true);\r\n    setIdeas(prevIdeas => {\r\n      let newIdeas = []\r\n      prevIdeas.forEach(idea => {\r\n\r\n        // set ideaEdit to true to display the textfield\r\n        if (idea.id === ideaID) {\r\n          idea.ideaEdit = true\r\n        }\r\n        newIdeas.push(idea)\r\n      })\r\n      return newIdeas;\r\n    })\r\n\r\n  }\r\n\r\n  const getIdeaContent = (idea, index) => {\r\n\r\n    // display TextField if idea is being edited\r\n    // else display normal text\r\n    if (idea.ideaEdit){\r\n      return (\r\n        <TextField\r\n          key={idea.id}\r\n          className={`${classes.lines} ${classes.ideaTextField}`}\r\n          label=\"Your Idea\"\r\n          variant=\"outlined\"\r\n          value={idea.idea}\r\n          autoFocus={true}\r\n          id={idea.id}\r\n          onChange={handleIdeaValueChange}\r\n          onKeyDown={handleIdeaValueKeyDown}\r\n        />\r\n      )\r\n    }\r\n\r\n    else {\r\n      return (\r\n        <Typography key={idea.id} className={classes.lines}>\r\n          {index+1}. {idea.idea}\r\n\r\n          <IconButton\r\n            size='small'\r\n            className={classes.actionItems}\r\n            onClick={() => handleIdeaEditKey(idea.id)}\r\n            aria-label=\"edit\"\r\n          >\r\n            <EditIcon style={{fontSize:'100%'}} />\r\n          </IconButton>\r\n\r\n          <IconButton\r\n            size='small'\r\n            className={classes.actionItems}\r\n            onClick={() => handleIdeaDelete(idea.id)}\r\n            aria-label=\"delete\"\r\n          >\r\n            <DeleteIcon style={{fontSize:'100%'}} />\r\n          </IconButton>\r\n        </Typography>\r\n      )\r\n    }\r\n  }\r\n\r\n  const addNewIdea = event => {\r\n    if(editingIdea){\r\n      alert('Please complete adding/editing another idea first.')\r\n    }\r\n\r\n    else if (ideas.length >= 20){\r\n      alert('Maximum idea limit reached for the current day.')\r\n    }\r\n\r\n    else {\r\n      setEditingIdea(true);\r\n      setIdeas( prevIdeas => {\r\n        // add new idea with default value and set editing to true\r\n        return [ ...prevIdeas, {id:getNewID('idea'), idea:'', ideaEdit:true} ]\r\n      })\r\n    }\r\n\r\n    event.preventDefault()\r\n  }\r\n\r\n  const getTitleContent = () => {\r\n\r\n    // display TextField if title is being edited\r\n    // else display normal text\r\n    if (editingTitle) {\r\n      return (\r\n        <TextField\r\n          className={classes.ideaTextField}\r\n          label=\"Your Title\"\r\n          variant=\"outlined\"\r\n          autoFocus={true}\r\n          value={title}\r\n          onChange={handleTitleValueChange}\r\n          onKeyDown={handleTitleKeyDown}\r\n        />\r\n      )\r\n    }\r\n\r\n    else {\r\n      if (title === ''){\r\n        return (\r\n          <Typography>\r\n            New Title\r\n          </Typography>\r\n        )\r\n      }\r\n      else {\r\n        return (\r\n          <Typography>\r\n            {title}\r\n          </Typography>\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  const addNewTag = event => {\r\n    if(editingTag){\r\n      alert('Please complete adding/editing another tag first.')\r\n    }\r\n\r\n    else {\r\n      setEditingTag(true);\r\n      setTags( prevTags => {\r\n        // add new tag and set editing to true\r\n        return [ ...prevTags, {id:getNewID('tag'), tag:'', tagEdit:true} ]\r\n      })\r\n    }\r\n\r\n    event.preventDefault()\r\n  }\r\n\r\n  const getTagChip = tag => {\r\n    // display TextField if tag is being edited\r\n    // else display normal text\r\n    if (tag.tagEdit){\r\n      return (\r\n        <TextField\r\n          key={tag.id}\r\n          label=\"Your Tag\"\r\n          variant=\"outlined\"\r\n          value={tag.tag}\r\n          autoFocus={true}\r\n          id={tag.id}\r\n          onChange={handleTagValueChange}\r\n          onKeyDown={handleTagValueKeyDown}\r\n        />\r\n      )\r\n    }\r\n\r\n    else {\r\n      return (\r\n        <Chip\r\n          variant='outlined'\r\n          key={tag.id}\r\n          label={tag.tag}\r\n          className={classes.tags}\r\n          size='small'\r\n          onDelete={() => handleTagDelete(tag.id)}\r\n          onClick={() => handleTagClick(tag.tag)}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  const getDateString = () => {\r\n    return (\r\n        date.getDate() + ' ' + monthNames[date.getMonth()] + ', ' + date.getFullYear()\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" className={classes.root}>\r\n\r\n      <Menu open={menuOpen} onClose={() => { setMenuOpen(false) }} />\r\n\r\n      <Typography className={classes.source}>\r\n        <Link\r\n          href=\"https://jamesaltucher.com/blog/the-ultimate-guide-for-becoming-an-idea-machine/\"\r\n          rel=\"noreferrer\"\r\n          target=\"_blank\"\r\n          style={{color: '#666'}}\r\n        >\r\n          The ultimate guide for becoming an idea machine\r\n        </Link> by James Altucher\r\n      </Typography>\r\n\r\n      <Paper className={classes.page} square>\r\n\r\n        {\r\n          displayCalendar && !displayTagSearchResults &&\r\n          (\r\n            <Calendar\r\n              light={true}\r\n              selection={handleCalendarSelection}\r\n            />\r\n          )\r\n        }\r\n\r\n        {\r\n\r\n          !displayCalendar && displayTagSearchResults &&\r\n          (\r\n            <Paper elevation={0} className={classes.pageContent} square>\r\n              <Typography variant=\"h6\">Titles in the tag</Typography>\r\n              <List>\r\n                {\r\n                  tagSearchResults.map(idea => (\r\n                    <ListItem\r\n                      button\r\n                      key={idea.date}\r\n                      onClick={() => handleCalendarSelection(new Date(idea.date))}\r\n                    >\r\n                      <ListItemText primary={idea.title} />\r\n                    </ListItem>\r\n                  ))\r\n                }\r\n              </List>\r\n            </Paper>\r\n          )\r\n\r\n        }\r\n\r\n        {\r\n          !displayCalendar && !displayTagSearchResults &&\r\n          (\r\n            <>\r\n\r\n              <IconButton\r\n                size=\"small\"\r\n                onClick={() => { setMenuOpen(true) }}\r\n                aria-label=\"open-menu\"\r\n                className={classes.menuIcon}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n\r\n              <Container style={{textAlign: 'right'}}>\r\n                <IconButton\r\n                  size='small'\r\n                  onClick={addNewTag}\r\n                  aria-label=\"add-tag\"\r\n                >\r\n                  <AddIcon />\r\n                </IconButton>\r\n              </Container>\r\n\r\n              <Grid container justify='space-between' alignItems=\"flex-end\">\r\n                <Grid item>\r\n                  <Typography className={classes.date}>\r\n                    {getDateString()}\r\n\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={handleDateEdit}\r\n                      aria-label=\"edit-date\"\r\n                      style={{marginLeft: 10}}\r\n                    >\r\n                      <EditIcon style={{fontSize:\"100%\"}} />\r\n                    </IconButton>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  {tags.map(tag => (\r\n                    getTagChip(tag)\r\n                  ))}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container>\r\n                <Grid item>\r\n                  {getTitleContent()}\r\n                </Grid>\r\n                <Grid item style={{marginLeft: 10}}>\r\n                  {editTitleIconDisplay && (\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={handleTitleEditKey}\r\n                      aria-label=\"edit-title\"\r\n                    >\r\n                      <EditIcon style={{fontSize:\"100%\"}} />\r\n                    </IconButton>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Paper elevation={0} className={classes.pageContent} square>\r\n                {ideas.map((idea, index) => (\r\n                    getIdeaContent(idea, index)\r\n                ))}\r\n                <IconButton\r\n                  onClick={addNewIdea}\r\n                  size=\"small\"\r\n                  aria-label=\"add-idea\"\r\n                  className={classes.lines}\r\n                >\r\n                  <AddIcon />\r\n                </IconButton>\r\n              </Paper>\r\n            </>\r\n          )\r\n        }\r\n      </Paper>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    marginTop:40,\r\n  },\r\n  page: {\r\n    padding:'70px 70px 20px',\r\n    backgroundColor: 'yellow',\r\n    minHeight: 600,\r\n    borderTop: '0px'\r\n  },\r\n  pageContent: {\r\n    marginTop: 25,\r\n  },\r\n  lines: {\r\n    marginTop: 10,\r\n    borderBottom: '1px solid #d4d4d4',\r\n    '&:hover, &.active:hover': {\r\n      '& button': {\r\n        display: 'inline'\r\n      }\r\n    }\r\n  },\r\n  date: {\r\n    fontSize:'75%',\r\n  },\r\n  tags: {\r\n    margin: '0 5px 0 0'\r\n  },\r\n  source: {\r\n    textAlign: 'right',\r\n    fontSize: '75%',\r\n    fontStyle: 'italic'\r\n  },\r\n  ideaTextField: {\r\n    width: '100%'\r\n  },\r\n  actionItems: {\r\n    display: 'none',\r\n    cursor: 'pointer',\r\n  },\r\n  actionButtons: {\r\n    marginTop: 10\r\n  },\r\n  menuIcon: {\r\n    marginTop: '-30px',\r\n    marginBottom: '30px'\r\n  }\r\n}));\r\n\r\nexport default Ideas;\r\n","import React from 'react';\n\nimport Ideas from './ideas';\n\nfunction App() {\n  return (\n    <Ideas />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}